{"ast":null,"code":"var _jsxFileName = \"/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/DragandDrop/DragandDropContainer.js.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { TopicContext } from \"../Contexts/TopicContext\";\nimport Column from \"./Column.js\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DragandDropContainer() {\n  _s();\n\n  const {\n    topics,\n    setTopics\n  } = useContext(TopicContext);\n  const [initialData, setInitialData] = useState([{\n    columns: {\n      \"column-1\": {\n        id: \"column-1\",\n        title: \"To do\",\n        taskIds: [discussionTopics]\n      } // Facilitate reordering of the columns\n\n    },\n    columnOrder: [\"column-1\"]\n  }]);\n  const discussionTopics = topics.map(topic => {\n    return {\n      id: topic.id,\n      title: topic.topicTitle\n    };\n  }); // console.log(initialData);\n\n  function onDragEnd(result) {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const column = initialData.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n    const newColumn = { ...column,\n      taskIds: newTaskIds\n    };\n    const newState = { ...initialData,\n      columns: { ...initialData.columns,\n        [newColumn.id]: newColumn\n      }\n    };\n    setTopics(newState);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: initialData.columnOrder.map(columnId => {\n        const column = initialData.columns[columnId];\n        const tasks = column.taskIds.map(taskId => taskId); // console.log(\"column\", column);\n        // console.log(tasks);\n\n        return /*#__PURE__*/_jsxDEV(Column, {\n          column: column,\n          tasks: tasks[0]\n        }, column.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DragandDropContainer, \"PEArHnpX5HfDfj1ZuGdYyV+3tpg=\");\n\n_c = DragandDropContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragandDropContainer\");","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/DragandDrop/DragandDropContainer.js.js"],"names":["React","useContext","useState","TopicContext","Column","DragDropContext","DragandDropContainer","topics","setTopics","initialData","setInitialData","columns","id","title","taskIds","discussionTopics","columnOrder","map","topic","topicTitle","onDragEnd","result","destination","source","draggableId","droppableId","index","column","newTaskIds","Array","from","splice","newColumn","newState","columnId","tasks","taskId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,eAAe,SAASC,oBAAT,GAAgC;AAAA;;AAC7C,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAwBP,UAAU,CAACE,YAAD,CAAxC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,CAC7C;AACES,IAAAA,OAAO,EAAE;AACP,kBAAY;AACVC,QAAAA,EAAE,EAAE,UADM;AAEVC,QAAAA,KAAK,EAAE,OAFG;AAGVC,QAAAA,OAAO,EAAE,CAACC,gBAAD;AAHC,OADL,CAMP;;AANO,KADX;AASEC,IAAAA,WAAW,EAAE,CAAC,UAAD;AATf,GAD6C,CAAD,CAA9C;AAcA,QAAMD,gBAAgB,GAAGR,MAAM,CAACU,GAAP,CAAWC,KAAK,IAAI;AAC3C,WAAO;AAAEN,MAAAA,EAAE,EAAEM,KAAK,CAACN,EAAZ;AAAgBC,MAAAA,KAAK,EAAEK,KAAK,CAACC;AAA7B,KAAP;AACD,GAFwB,CAAzB,CAhB6C,CAoB7C;;AAEA,WAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,MAAf;AAAuBC,MAAAA;AAAvB,QAAuCH,MAA7C;;AACA,QAAI,CAACC,WAAL,EAAkB;AAChB;AACD;;AACD,QACEA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IACAH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KAF/B,EAGE;AACA;AACD;;AAED,UAAMC,MAAM,GAAGlB,WAAW,CAACE,OAAZ,CAAoBY,MAAM,CAACE,WAA3B,CAAf;AACA,UAAMG,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACb,OAAlB,CAAnB;AACAc,IAAAA,UAAU,CAACG,MAAX,CAAkBR,MAAM,CAACG,KAAzB,EAAgC,CAAhC;AACAE,IAAAA,UAAU,CAACG,MAAX,CAAkBT,WAAW,CAACI,KAA9B,EAAqC,CAArC,EAAwCF,WAAxC;AAEA,UAAMQ,SAAS,GAAG,EAChB,GAAGL,MADa;AAEhBb,MAAAA,OAAO,EAAEc;AAFO,KAAlB;AAKA,UAAMK,QAAQ,GAAG,EACf,GAAGxB,WADY;AAEfE,MAAAA,OAAO,EAAE,EACP,GAAGF,WAAW,CAACE,OADR;AAEP,SAACqB,SAAS,CAACpB,EAAX,GAAgBoB;AAFT;AAFM,KAAjB;AAOAxB,IAAAA,SAAS,CAACyB,QAAD,CAAT;AACD;;AAED,sBACE;AAAA,2BACE,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAEb,SAA5B;AAAA,gBACGX,WAAW,CAACO,WAAZ,CAAwBC,GAAxB,CAA4BiB,QAAQ,IAAI;AACvC,cAAMP,MAAM,GAAGlB,WAAW,CAACE,OAAZ,CAAoBuB,QAApB,CAAf;AACA,cAAMC,KAAK,GAAGR,MAAM,CAACb,OAAP,CAAeG,GAAf,CAAmBmB,MAAM,IAAIA,MAA7B,CAAd,CAFuC,CAGvC;AACA;;AACA,4BAAO,QAAC,MAAD;AAAwB,UAAA,MAAM,EAAET,MAAhC;AAAwC,UAAA,KAAK,EAAEQ,KAAK,CAAC,CAAD;AAApD,WAAaR,MAAM,CAACf,EAApB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OANA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAnEuBN,oB;;KAAAA,oB","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { TopicContext } from \"../Contexts/TopicContext\";\nimport Column from \"./Column.js\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nexport default function DragandDropContainer() {\n  const { topics, setTopics } = useContext(TopicContext);\n  const [initialData, setInitialData] = useState([\n    {\n      columns: {\n        \"column-1\": {\n          id: \"column-1\",\n          title: \"To do\",\n          taskIds: [discussionTopics],\n        },\n        // Facilitate reordering of the columns\n      },\n      columnOrder: [\"column-1\"],\n    },\n  ]);\n\n  const discussionTopics = topics.map(topic => {\n    return { id: topic.id, title: topic.topicTitle };\n  });\n\n  // console.log(initialData);\n\n  function onDragEnd(result) {\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const column = initialData.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n\n    const newColumn = {\n      ...column,\n      taskIds: newTaskIds,\n    };\n\n    const newState = {\n      ...initialData,\n      columns: {\n        ...initialData.columns,\n        [newColumn.id]: newColumn,\n      },\n    };\n    setTopics(newState);\n  }\n\n  return (\n    <div>\n      <DragDropContext onDragEnd={onDragEnd}>\n        {initialData.columnOrder.map(columnId => {\n          const column = initialData.columns[columnId];\n          const tasks = column.taskIds.map(taskId => taskId);\n          // console.log(\"column\", column);\n          // console.log(tasks);\n          return <Column key={column.id} column={column} tasks={tasks[0]} />;\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}