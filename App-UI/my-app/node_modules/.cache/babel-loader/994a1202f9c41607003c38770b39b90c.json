{"ast":null,"code":"var _jsxFileName = \"/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\nimport \"./Styles/App.scss\";\nimport \"./Styles/Reset.css\";\nimport \"./Styles/Header.scss\";\nimport \"./Styles/ContentBody.scss\";\nimport Header from \"./components/Header.js\";\nimport ContentBodyParent from \"./components/ContentBodyParent.js\";\nimport DiscussionSession from \"./components/DiscussionSession.js\";\nimport { TopicContext } from \"./components/Contexts/TopicContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // State\n  const [topics, setTopics] = useState([]);\n  const [topicInput, setTopicInput] = useState(\"\");\n  useEffect(() => {\n    getTopics();\n  }, []); // Functions;\n\n  async function getTopics() {\n    try {\n      const response = await axios.get(\"http://localhost:8000/api/topics\");\n      const topics = await response.data;\n      setTopics(topics.Items);\n    } catch (err) {\n      console.log(\"Did not fetch topics: \", err);\n    }\n  }\n\n  function topicInputHandler(e) {\n    setTopicInput(e.target.value);\n  }\n\n  async function createTopic() {\n    const newTopic = {\n      id: uuidv4().toString(),\n      topicTitle: topicInput\n    };\n    setTopicInput(\"\");\n\n    if (topicInput === \"\") {\n      alert(\"Field must not be empty.\");\n    } else {\n      console.log(newTopic);\n      const info = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newTopic)\n      }; // This is an IIFE used to cause the app to rerender\n\n      (function initiateReRender() {\n        getTopics();\n      })();\n\n      await fetch(\"http://localhost:8000/api\", info);\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n    // Using React-Router for Home/Session Pages\n    _jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          className: \"Header\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-Body\",\n          children: /*#__PURE__*/_jsxDEV(Switch, {\n            children: /*#__PURE__*/_jsxDEV(TopicContext.Provider, {\n              value: {\n                topics,\n                getTopics\n              },\n              children: [/*#__PURE__*/_jsxDEV(Route, {\n                exact: true,\n                path: \"/\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(ContentBodyParent, {\n                    className: \"Topic-Child-Container\",\n                    createTopic: createTopic,\n                    getTopics: getTopics,\n                    input: topicInput,\n                    topicInputHandler: topicInputHandler\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Route, {\n                exact: true,\n                path: \"/discussion\",\n                children: /*#__PURE__*/_jsxDEV(DiscussionSession, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"flqiUnG1JR6ufOyGBTccox/35kY=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","v4","uuidv4","axios","Header","ContentBodyParent","DiscussionSession","TopicContext","App","topics","setTopics","topicInput","setTopicInput","getTopics","response","get","data","Items","err","console","log","topicInputHandler","e","target","value","createTopic","newTopic","id","toString","topicTitle","alert","info","method","headers","body","JSON","stringify","initiateReRender","fetch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\nimport \"./Styles/App.scss\";\nimport \"./Styles/Reset.css\";\nimport \"./Styles/Header.scss\";\nimport \"./Styles/ContentBody.scss\";\nimport Header from \"./components/Header.js\";\nimport ContentBodyParent from \"./components/ContentBodyParent.js\";\nimport DiscussionSession from \"./components/DiscussionSession.js\";\nimport { TopicContext } from \"./components/Contexts/TopicContext\";\n\nexport default function App() {\n  // State\n  const [topics, setTopics] = useState([]);\n  const [topicInput, setTopicInput] = useState(\"\");\n\n  useEffect(() => {\n    getTopics();\n  }, []);\n\n  // Functions;\n  async function getTopics() {\n    try {\n      const response = await axios.get(\"http://localhost:8000/api/topics\");\n      const topics = await response.data;\n      setTopics(topics.Items);\n    } catch (err) {\n      console.log(\"Did not fetch topics: \", err);\n    }\n  }\n\n  function topicInputHandler(e) {\n    setTopicInput(e.target.value);\n  }\n\n  async function createTopic() {\n    const newTopic = {\n      id: uuidv4().toString(),\n      topicTitle: topicInput,\n    };\n    setTopicInput(\"\");\n    if (topicInput === \"\") {\n      alert(\"Field must not be empty.\");\n    } else {\n      console.log(newTopic);\n      const info = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newTopic),\n      };\n      // This is an IIFE used to cause the app to rerender\n      (function initiateReRender() {\n        getTopics();\n      })();\n      await fetch(\"http://localhost:8000/api\", info);\n    }\n  }\n\n  return (\n    // Using React-Router for Home/Session Pages\n\n    <div className='App'>\n      <Router>\n        <Header className='Header' />\n        <div className='App-Body'>\n          <Switch>\n            <TopicContext.Provider value={{ topics, getTopics }}>\n              <Route exact path='/'>\n                <div>\n                  <ContentBodyParent\n                    className='Topic-Child-Container'\n                    createTopic={createTopic}\n                    getTopics={getTopics}\n                    input={topicInput}\n                    topicInputHandler={topicInputHandler}\n                  />\n                </div>\n              </Route>\n              <Route exact path='/discussion'>\n                <DiscussionSession />\n              </Route>\n            </TopicContext.Provider>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}