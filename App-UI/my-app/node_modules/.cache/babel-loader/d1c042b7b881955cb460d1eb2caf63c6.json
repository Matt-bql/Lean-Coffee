{"ast":null,"code":"var _jsxFileName = \"/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Body.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TileContent from \"./TileContent.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // State\n  const [topics, setTopics] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [updatedTopicInput, setUpdatedTopicInput] = useState(\"\");\n  const [isEditButtonClicked, setIsEditButtonClicked] = useState(false);\n  const [isNameClicked, setIsNameClicked] = useState(false); //Functions\n  //Fetching data to show use the topic titles.\n\n  useEffect(() => {\n    getTopics();\n  }, []);\n\n  function getTopics() {\n    try {\n      fetch(\"http://localhost:8000/api/topics\").then(res => res.json()).then(res => {\n        setTopics(res.Items);\n      });\n    } catch (err) {\n      console.log(\"frontend did not fetch topics\", err);\n    }\n  } // Creating topic being sent to the database.\n\n\n  async function createTopicHandler() {\n    const newTopic = {\n      id: Date.now().toString(),\n      topicTitle: input\n    };\n\n    if (input === \"\") {\n      alert(\"Field must not be empty.\");\n    } else {\n      const info = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newTopic)\n      };\n      await fetch(\"http://localhost:8000/api\", info);\n    }\n\n    getTopics();\n  }\n\n  function changedTopicTitle(e) {\n    setUpdatedTopicInput(e.target.value);\n  }\n\n  async function submitTopicTitleChange() {\n    try {\n      const updatedTopicTitle = {\n        topicTitle: updatedTopicInput\n      };\n      const info = {\n        method: \"POST\",\n        header: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(updatedTopicTitle)\n      };\n      await fetch(`http://localhost:8000/api/topics/${topics.id}`, info);\n    } catch (err) {\n      console.log(err);\n    }\n\n    getTopics();\n    setIsEditButtonClicked(false);\n  }\n\n  function editButtonClickedIsTrue() {\n    setIsEditButtonClicked(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: topics.map(topic => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TileContent, {\n        id: topic.id,\n        topic: topic,\n        editButtonClickedIsTrue: editButtonClickedIsTrue,\n        isEditButtonClicked: isEditButtonClicked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)\n    }, topic.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+J+XsgcbO7lIl1wgpyIec5mDNNc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Body.js"],"names":["React","useEffect","useState","TileContent","App","topics","setTopics","input","setInput","updatedTopicInput","setUpdatedTopicInput","isEditButtonClicked","setIsEditButtonClicked","isNameClicked","setIsNameClicked","getTopics","fetch","then","res","json","Items","err","console","log","createTopicHandler","newTopic","id","Date","now","toString","topicTitle","alert","info","method","headers","body","JSON","stringify","changedTopicTitle","e","target","value","submitTopicTitleChange","updatedTopicTitle","header","editButtonClickedIsTrue","map","topic"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport TileContent from \"./TileContent.js\";\n\nexport default function App() {\n  // State\n  const [topics, setTopics] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [updatedTopicInput, setUpdatedTopicInput] = useState(\"\");\n  const [isEditButtonClicked, setIsEditButtonClicked] = useState(false);\n  const [isNameClicked, setIsNameClicked] = useState(false);\n  //Functions\n\n  //Fetching data to show use the topic titles.\n  useEffect(() => {\n    getTopics();\n  }, []);\n\n  function getTopics() {\n    try {\n      fetch(\"http://localhost:8000/api/topics\")\n        .then(res => res.json())\n        .then(res => {\n          setTopics(res.Items);\n        });\n    } catch (err) {\n      console.log(\"frontend did not fetch topics\", err);\n    }\n  }\n\n  // Creating topic being sent to the database.\n  async function createTopicHandler() {\n    const newTopic = {\n      id: Date.now().toString(),\n      topicTitle: input,\n    };\n    if (input === \"\") {\n      alert(\"Field must not be empty.\");\n    } else {\n      const info = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(newTopic),\n      };\n      await fetch(\"http://localhost:8000/api\", info);\n    }\n    getTopics();\n  }\n  function changedTopicTitle(e) {\n    setUpdatedTopicInput(e.target.value);\n  }\n\n  async function submitTopicTitleChange() {\n    try {\n      const updatedTopicTitle = { topicTitle: updatedTopicInput };\n      const info = {\n        method: \"POST\",\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(updatedTopicTitle),\n      };\n      await fetch(`http://localhost:8000/api/topics/${topics.id}`, info);\n    } catch (err) {\n      console.log(err);\n    }\n    getTopics();\n    setIsEditButtonClicked(false);\n  }\n\n  function editButtonClickedIsTrue() {\n    setIsEditButtonClicked(true);\n  }\n  return (\n    <div className='App'>\n      {topics.map(topic => (\n        <div key={topic.id}>\n          {\n            <TileContent\n              id={topic.id}\n              topic={topic}\n              editButtonClickedIsTrue={editButtonClickedIsTrue}\n              isEditButtonClicked={isEditButtonClicked}\n            />\n          }\n        </div>\n      ))}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}