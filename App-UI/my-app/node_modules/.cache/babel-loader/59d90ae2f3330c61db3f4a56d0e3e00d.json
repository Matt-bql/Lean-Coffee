{"ast":null,"code":"var _jsxFileName = \"/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/DragandDrop/DragandDropContainer.js.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { TopicContext } from \"../Contexts/TopicContext\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DragandDropContainer() {\n  _s();\n\n  const {\n    topics,\n    getTopics\n  } = useContext(TopicContext);\n  useEffect(() => {\n    getTopics();\n  }, []);\n  console.log(\"topics: \", topics);\n  const columnsFromBackend = {\n    [uuidv4()]: {\n      name: \"Requested\",\n      items: topics\n    },\n    [uuidv4()]: {\n      name: \"Current Discussion\",\n      items: []\n    },\n    [uuidv4()]: {\n      name: \"Completed\",\n      items: []\n    }\n  };\n\n  const onDragEnd = (result, columns, setColumns) => {\n    if (!result.destination) return;\n    const {\n      source,\n      destination\n    } = result;\n\n    if (source.droppableId !== destination.droppableId) {\n      const sourceColumn = columns[source.droppableId];\n      const destColumn = columns[destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items];\n      const [removed] = sourceItems.splice(source.index, 1);\n      destItems.splice(destination.index, 0, removed);\n      setColumns({ ...columns,\n        [source.droppableId]: { ...sourceColumn,\n          items: sourceItems\n        },\n        [destination.droppableId]: { ...destColumn,\n          items: destItems\n        }\n      });\n    } else {\n      const column = columns[source.droppableId];\n      const copiedItems = [...column.items];\n      const [removed] = copiedItems.splice(source.index, 1);\n      copiedItems.splice(destination.index, 0, removed);\n      setColumns({ ...columns,\n        [source.droppableId]: { ...column,\n          items: copiedItems\n        }\n      });\n    }\n  }; // console.log(columnsFromTheBackend);\n\n\n  const [columns, setColumns] = useState(columnsFromBackend);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEnd(result, columns, setColumns),\n      children: Object.entries(columns).map(([columnId, column], index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: column.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              margin: 8\n            },\n            children: /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: columnId,\n              children: (provided, snapshot) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n                  ref: provided.innerRef,\n                  style: {\n                    background: snapshot.isDraggingOver ? \"lightblue\" : \"lightgrey\",\n                    padding: 4,\n                    width: 250,\n                    minHeight: 500\n                  },\n                  children: [column.items.map((item, index) => {\n                    return /*#__PURE__*/_jsxDEV(Draggable, {\n                      draggableId: item.id,\n                      index: index,\n                      children: (provided, snapshot) => {\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          ref: provided.innerRef,\n                          ...provided.draggableProps,\n                          ...provided.dragHandleProps,\n                          style: {\n                            userSelect: \"none\",\n                            padding: 16,\n                            margin: \"0 0 8px 0\",\n                            minHeight: \"50px\",\n                            backgroundColor: snapshot.isDragging ? \"#263B4A\" : \"#456C86\",\n                            color: \"white\",\n                            ...provided.draggableProps.style\n                          },\n                          children: item.topicTitle\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 107,\n                          columnNumber: 35\n                        }, this);\n                      }\n                    }, item.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 100,\n                      columnNumber: 29\n                    }, this);\n                  }), provided.placeholder]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 23\n                }, this);\n              }\n            }, columnId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, columnId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DragandDropContainer, \"270du7FKr44EVrJgTSVo3w/ooVg=\");\n\n_c = DragandDropContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragandDropContainer\");","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/DragandDrop/DragandDropContainer.js.js"],"names":["React","useContext","useState","useEffect","TopicContext","DragDropContext","Draggable","Droppable","v4","uuidv4","DragandDropContainer","topics","getTopics","console","log","columnsFromBackend","name","items","onDragEnd","result","columns","setColumns","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","removed","splice","index","column","copiedItems","display","justifyContent","height","Object","entries","map","columnId","flexDirection","alignItems","margin","provided","snapshot","droppableProps","innerRef","background","isDraggingOver","padding","width","minHeight","item","id","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","color","style","topicTitle","placeholder"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { TopicContext } from \"../Contexts/TopicContext\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default function DragandDropContainer() {\n  const { topics, getTopics } = useContext(TopicContext);\n\n  useEffect(() => {\n    getTopics();\n  }, []);\n  console.log(\"topics: \", topics);\n  const columnsFromBackend = {\n    [uuidv4()]: {\n      name: \"Requested\",\n      items: topics,\n    },\n    [uuidv4()]: {\n      name: \"Current Discussion\",\n      items: [],\n    },\n    [uuidv4()]: {\n      name: \"Completed\",\n      items: [],\n    },\n  };\n\n  const onDragEnd = (result, columns, setColumns) => {\n    if (!result.destination) return;\n    const { source, destination } = result;\n    if (source.droppableId !== destination.droppableId) {\n      const sourceColumn = columns[source.droppableId];\n      const destColumn = columns[destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items];\n      const [removed] = sourceItems.splice(source.index, 1);\n      destItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...sourceColumn,\n          items: sourceItems,\n        },\n        [destination.droppableId]: {\n          ...destColumn,\n          items: destItems,\n        },\n      });\n    } else {\n      const column = columns[source.droppableId];\n      const copiedItems = [...column.items];\n      const [removed] = copiedItems.splice(source.index, 1);\n      copiedItems.splice(destination.index, 0, removed);\n      setColumns({\n        ...columns,\n        [source.droppableId]: {\n          ...column,\n          items: copiedItems,\n        },\n      });\n    }\n  };\n  // console.log(columnsFromTheBackend);\n\n  const [columns, setColumns] = useState(columnsFromBackend);\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\n      <DragDropContext\n        onDragEnd={result => onDragEnd(result, columns, setColumns)}\n      >\n        {Object.entries(columns).map(([columnId, column], index) => {\n          return (\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n              }}\n              key={columnId}\n            >\n              <h2>{column.name}</h2>\n              <div style={{ margin: 8 }}>\n                <Droppable droppableId={columnId} key={columnId}>\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={{\n                          background: snapshot.isDraggingOver\n                            ? \"lightblue\"\n                            : \"lightgrey\",\n                          padding: 4,\n                          width: 250,\n                          minHeight: 500,\n                        }}\n                      >\n                        {column.items.map((item, index) => {\n                          return (\n                            <Draggable\n                              key={item.id}\n                              draggableId={item.id}\n                              index={index}\n                            >\n                              {(provided, snapshot) => {\n                                return (\n                                  <div\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    style={{\n                                      userSelect: \"none\",\n                                      padding: 16,\n                                      margin: \"0 0 8px 0\",\n                                      minHeight: \"50px\",\n                                      backgroundColor: snapshot.isDragging\n                                        ? \"#263B4A\"\n                                        : \"#456C86\",\n                                      color: \"white\",\n                                      ...provided.draggableProps.style,\n                                    }}\n                                  >\n                                    {item.topicTitle}\n                                  </div>\n                                );\n                              }}\n                            </Draggable>\n                          );\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    );\n                  }}\n                </Droppable>\n              </div>\n            </div>\n          );\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}