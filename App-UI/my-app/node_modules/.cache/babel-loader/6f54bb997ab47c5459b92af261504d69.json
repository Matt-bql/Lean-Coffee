{"ast":null,"code":"var perfectTimer = {\n  // Set of functions designed to create nearly perfect timers that do not drift\n  timers: {},\n  // An object of timers by ID\n  nextID: 0,\n  // Next available timer reference ID\n  set: (callback, interval) => {\n    // Set a timer\n    var expected = Date.now() + interval; // Expected currect time when timeout fires\n\n    var ID = perfectTimer.nextID++; // Create reference to timer\n\n    function step() {\n      // Adjusts the timeout to account for any drift since last timeout\n      callback(); // Call the callback\n\n      var dt = Date.now() - expected; // The drift (ms) (positive for overshooting) comparing the expected time to the current time\n\n      expected += interval; // Set the next expected currect time when timeout fires\n\n      perfectTimer.timers[ID] = setTimeout(step, Math.max(0, interval - dt)); // Take into account drift\n    }\n\n    perfectTimer.timers[ID] = setTimeout(step, interval); // Return reference to timer\n\n    return ID;\n  },\n  clear: ID => {\n    // Clear & delete a timer by ID reference\n    if (perfectTimer.timers[ID] != undefined) {\n      // Preventing errors when trying to clear a timer that no longer exists\n      console.log(\"clear timer:\", ID);\n      console.log(\"timers before:\", perfectTimer.timers);\n      clearTimeout(perfectTimer.timers[ID]); // Clear timer\n\n      delete perfectTimer.timers[ID]; // Delete timer reference\n\n      console.log(\"timers after:\", perfectTimer.timers);\n    }\n  }\n}; // Below are some tests\n\nvar timerOne = perfectTimer.set(() => {\n  console.log(new Date().toString(), Date.now(), \"timerOne\", timerOne);\n}, 1000);\nconsole.log(timerOne);\nsetTimeout(() => {\n  perfectTimer.clear(timerOne);\n}, 5000);\nvar timerTwo = perfectTimer.set(() => {\n  console.log(new Date().toString(), Date.now(), \"timerTwo\", timerTwo);\n}, 1000);\nconsole.log(timerTwo);\nsetTimeout(() => {\n  perfectTimer.clear(timerTwo);\n}, 8000);","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Timer/Timer.js"],"names":["perfectTimer","timers","nextID","set","callback","interval","expected","Date","now","ID","step","dt","setTimeout","Math","max","clear","undefined","console","log","clearTimeout","timerOne","toString","timerTwo"],"mappings":"AAAA,IAAIA,YAAY,GAAG;AACjB;AACAC,EAAAA,MAAM,EAAE,EAFS;AAEL;AACZC,EAAAA,MAAM,EAAE,CAHS;AAGN;AACXC,EAAAA,GAAG,EAAE,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3B;AACA,QAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,KAAaH,QAA5B,CAF2B,CAEW;;AACtC,QAAII,EAAE,GAAGT,YAAY,CAACE,MAAb,EAAT,CAH2B,CAGK;;AAChC,aAASQ,IAAT,GAAgB;AACd;AACAN,MAAAA,QAAQ,GAFM,CAEF;;AACZ,UAAIO,EAAE,GAAGJ,IAAI,CAACC,GAAL,KAAaF,QAAtB,CAHc,CAGkB;;AAChCA,MAAAA,QAAQ,IAAID,QAAZ,CAJc,CAIQ;;AACtBL,MAAAA,YAAY,CAACC,MAAb,CAAoBQ,EAApB,IAA0BG,UAAU,CAACF,IAAD,EAAOG,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYT,QAAQ,GAAGM,EAAvB,CAAP,CAApC,CALc,CAK0D;AACzE;;AACDX,IAAAA,YAAY,CAACC,MAAb,CAAoBQ,EAApB,IAA0BG,UAAU,CAACF,IAAD,EAAOL,QAAP,CAApC,CAX2B,CAW2B;;AACtD,WAAOI,EAAP;AACD,GAjBgB;AAkBjBM,EAAAA,KAAK,EAAEN,EAAE,IAAI;AACX;AACA,QAAIT,YAAY,CAACC,MAAb,CAAoBQ,EAApB,KAA2BO,SAA/B,EAA0C;AACxC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BT,EAA5B;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BlB,YAAY,CAACC,MAA3C;AACAkB,MAAAA,YAAY,CAACnB,YAAY,CAACC,MAAb,CAAoBQ,EAApB,CAAD,CAAZ,CAJwC,CAID;;AACvC,aAAOT,YAAY,CAACC,MAAb,CAAoBQ,EAApB,CAAP,CALwC,CAKR;;AAChCQ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BlB,YAAY,CAACC,MAA1C;AACD;AACF;AA5BgB,CAAnB,C,CA+BA;;AACA,IAAImB,QAAQ,GAAGpB,YAAY,CAACG,GAAb,CAAiB,MAAM;AACpCc,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAIX,IAAJ,GAAWc,QAAX,EAAZ,EAAmCd,IAAI,CAACC,GAAL,EAAnC,EAA+C,UAA/C,EAA2DY,QAA3D;AACD,CAFc,EAEZ,IAFY,CAAf;AAGAH,OAAO,CAACC,GAAR,CAAYE,QAAZ;AACAR,UAAU,CAAC,MAAM;AACfZ,EAAAA,YAAY,CAACe,KAAb,CAAmBK,QAAnB;AACD,CAFS,EAEP,IAFO,CAAV;AAIA,IAAIE,QAAQ,GAAGtB,YAAY,CAACG,GAAb,CAAiB,MAAM;AACpCc,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAIX,IAAJ,GAAWc,QAAX,EAAZ,EAAmCd,IAAI,CAACC,GAAL,EAAnC,EAA+C,UAA/C,EAA2Dc,QAA3D;AACD,CAFc,EAEZ,IAFY,CAAf;AAGAL,OAAO,CAACC,GAAR,CAAYI,QAAZ;AAEAV,UAAU,CAAC,MAAM;AACfZ,EAAAA,YAAY,CAACe,KAAb,CAAmBO,QAAnB;AACD,CAFS,EAEP,IAFO,CAAV","sourcesContent":["var perfectTimer = {\n  // Set of functions designed to create nearly perfect timers that do not drift\n  timers: {}, // An object of timers by ID\n  nextID: 0, // Next available timer reference ID\n  set: (callback, interval) => {\n    // Set a timer\n    var expected = Date.now() + interval; // Expected currect time when timeout fires\n    var ID = perfectTimer.nextID++; // Create reference to timer\n    function step() {\n      // Adjusts the timeout to account for any drift since last timeout\n      callback(); // Call the callback\n      var dt = Date.now() - expected; // The drift (ms) (positive for overshooting) comparing the expected time to the current time\n      expected += interval; // Set the next expected currect time when timeout fires\n      perfectTimer.timers[ID] = setTimeout(step, Math.max(0, interval - dt)); // Take into account drift\n    }\n    perfectTimer.timers[ID] = setTimeout(step, interval); // Return reference to timer\n    return ID;\n  },\n  clear: ID => {\n    // Clear & delete a timer by ID reference\n    if (perfectTimer.timers[ID] != undefined) {\n      // Preventing errors when trying to clear a timer that no longer exists\n      console.log(\"clear timer:\", ID);\n      console.log(\"timers before:\", perfectTimer.timers);\n      clearTimeout(perfectTimer.timers[ID]); // Clear timer\n      delete perfectTimer.timers[ID]; // Delete timer reference\n      console.log(\"timers after:\", perfectTimer.timers);\n    }\n  },\n};\n\n// Below are some tests\nvar timerOne = perfectTimer.set(() => {\n  console.log(new Date().toString(), Date.now(), \"timerOne\", timerOne);\n}, 1000);\nconsole.log(timerOne);\nsetTimeout(() => {\n  perfectTimer.clear(timerOne);\n}, 5000);\n\nvar timerTwo = perfectTimer.set(() => {\n  console.log(new Date().toString(), Date.now(), \"timerTwo\", timerTwo);\n}, 1000);\nconsole.log(timerTwo);\n\nsetTimeout(() => {\n  perfectTimer.clear(timerTwo);\n}, 8000);\n"]},"metadata":{},"sourceType":"module"}