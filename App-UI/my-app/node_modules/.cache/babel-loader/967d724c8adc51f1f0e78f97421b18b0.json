{"ast":null,"code":"import _slicedToArray from\"/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Timer(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),seconds=_useState2[0],setSeconds=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),minutes=_useState4[0],setminutes=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isClicked=_useState6[0],setIsClicked=_useState6[1];function startTimer(){// set our end time\nsetIsClicked(true);var endTime=new Date().getTime()+301*1000;// calculate remaining time from now until deadline\nfunction getRemainingTime(deadline){var currentTime=new Date().getTime();return deadline-currentTime;}// pad value with zero\nfunction pad(value){return(\"0\"+Math.floor(value)).slice(-2);}// show time repeatedly\nfunction showTime(){var remainingTime=getRemainingTime(endTime);var seconds=pad(remainingTime/1000%60);var minutes=pad(remainingTime/(60*1000)%60);setSeconds(seconds);setminutes(minutes);// ensure clock only updates if a second or more is remaining\nif(remainingTime>=1000){requestAnimationFrame(showTime);}}// kick it all off\nrequestAnimationFrame(showTime);}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Countdown Clock\"}),/*#__PURE__*/_jsx(\"button\",{onClick:startTimer,children:\"Start\"}),/*#__PURE__*/_jsx(\"div\",{id:\"clockdiv\",children:/*#__PURE__*/_jsx(\"span\",{id:\"clock\"})}),!isClicked?/*#__PURE__*/_jsx(\"div\",{}):/*#__PURE__*/_jsx(\"div\",{children:\"\".concat(minutes,\":\").concat(seconds)})]});}","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Timer/Timer.js"],"names":["React","useState","Timer","seconds","setSeconds","minutes","setminutes","isClicked","setIsClicked","startTimer","endTime","Date","getTime","getRemainingTime","deadline","currentTime","pad","value","Math","floor","slice","showTime","remainingTime","requestAnimationFrame"],"mappings":"iKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,C,wFAEA,cAAe,SAASC,CAAAA,KAAT,EAAiB,eACAD,QAAQ,EADR,wCACvBE,OADuB,eACdC,UADc,8BAEAH,QAAQ,EAFR,yCAEvBI,OAFuB,eAEdC,UAFc,8BAGIL,QAAQ,CAAC,KAAD,CAHZ,yCAGvBM,SAHuB,eAGZC,YAHY,eAI9B,QAASC,CAAAA,UAAT,EAAsB,CACpB;AACAD,YAAY,CAAC,IAAD,CAAZ,CACA,GAAME,CAAAA,OAAO,CAAG,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,GAAuB,IAAM,IAA7C,CAEA;AACA,QAASC,CAAAA,gBAAT,CAA0BC,QAA1B,CAAoC,CAClC,GAAMC,CAAAA,WAAW,CAAG,GAAIJ,CAAAA,IAAJ,GAAWC,OAAX,EAApB,CACA,MAAOE,CAAAA,QAAQ,CAAGC,WAAlB,CACD,CAED;AACA,QAASC,CAAAA,GAAT,CAAaC,KAAb,CAAoB,CAClB,MAAO,CAAC,IAAMC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAP,EAA0BG,KAA1B,CAAgC,CAAC,CAAjC,CAAP,CACD,CAED;AACA,QAASC,CAAAA,QAAT,EAAoB,CAClB,GAAMC,CAAAA,aAAa,CAAGT,gBAAgB,CAACH,OAAD,CAAtC,CAEA,GAAMP,CAAAA,OAAO,CAAGa,GAAG,CAAEM,aAAa,CAAG,IAAjB,CAAyB,EAA1B,CAAnB,CAEA,GAAMjB,CAAAA,OAAO,CAAGW,GAAG,CAAEM,aAAa,EAAI,GAAK,IAAT,CAAd,CAAgC,EAAjC,CAAnB,CAEAlB,UAAU,CAACD,OAAD,CAAV,CACAG,UAAU,CAACD,OAAD,CAAV,CAEA;AACA,GAAIiB,aAAa,EAAI,IAArB,CAA2B,CACzBC,qBAAqB,CAACF,QAAD,CAArB,CACD,CACF,CAED;AACAE,qBAAqB,CAACF,QAAD,CAArB,CACD,CAED,mBACE,oCACE,uCADF,cAEE,eAAQ,OAAO,CAAEZ,UAAjB,mBAFF,cAGE,YAAK,EAAE,CAAC,UAAR,uBACE,aAAM,EAAE,CAAC,OAAT,EADF,EAHF,CAMG,CAACF,SAAD,cAAa,cAAb,cAA2B,+BAASF,OAAT,aAAoBF,OAApB,GAN9B,GADF,CAUD","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Timer() {\n  const [seconds, setSeconds] = useState();\n  const [minutes, setminutes] = useState();\n  const [isClicked, setIsClicked] = useState(false);\n  function startTimer() {\n    // set our end time\n    setIsClicked(true);\n    const endTime = new Date().getTime() + 301 * 1000;\n\n    // calculate remaining time from now until deadline\n    function getRemainingTime(deadline) {\n      const currentTime = new Date().getTime();\n      return deadline - currentTime;\n    }\n\n    // pad value with zero\n    function pad(value) {\n      return (\"0\" + Math.floor(value)).slice(-2);\n    }\n\n    // show time repeatedly\n    function showTime() {\n      const remainingTime = getRemainingTime(endTime);\n\n      const seconds = pad((remainingTime / 1000) % 60);\n\n      const minutes = pad((remainingTime / (60 * 1000)) % 60);\n\n      setSeconds(seconds);\n      setminutes(minutes);\n\n      // ensure clock only updates if a second or more is remaining\n      if (remainingTime >= 1000) {\n        requestAnimationFrame(showTime);\n      }\n    }\n\n    // kick it all off\n    requestAnimationFrame(showTime);\n  }\n\n  return (\n    <div>\n      <h1>Countdown Clock</h1>\n      <button onClick={startTimer}>Start</button>\n      <div id='clockdiv'>\n        <span id='clock'></span>\n      </div>\n      {!isClicked ? <div></div> : <div>{`${minutes}:${seconds}`}</div>}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}