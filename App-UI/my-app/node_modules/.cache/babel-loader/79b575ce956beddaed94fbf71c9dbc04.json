{"ast":null,"code":"var _jsxFileName = \"/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Timer/Timer.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Timer extends React.Component {\n  constructor() {\n    this.isRunning = false;\n    this.startTime = 0;\n    this.overallTime = 0;\n  }\n\n  _getTimeElapsedSinceLastStart() {\n    if (!this.startTime) {\n      return 0;\n    }\n\n    return Date.now() - this.startTime;\n  }\n\n  start() {\n    if (this.isRunning) {\n      return console.error(\"Timer is already running\");\n    }\n\n    this.isRunning = true;\n    this.startTime = Date.now();\n  }\n\n  stop() {\n    if (!this.isRunning) {\n      return console.error(\"Timer is already stopped\");\n    }\n\n    this.isRunning = false;\n    this.overallTime = this.overallTime + this._getTimeElapsedSinceLastStart();\n  }\n\n  reset() {\n    this.overallTime = 0;\n\n    if (this.isRunning) {\n      this.startTime = Date.now();\n      return;\n    }\n\n    this.startTime = 0;\n  }\n\n  getTime() {\n    if (!this.startTime) {\n      return 0;\n    }\n\n    if (this.isRunning) {\n      return this.overallTime + this._getTimeElapsedSinceLastStart();\n    }\n\n    return this.overallTime;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.start,\n        children: \"start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst timer = new Timer();\ntimer.start();\nsetInterval(() => {\n  const timeInSeconds = Math.round(timer.getTime() / 1000);\n  document.getElementById(\"time\").innerText = timeInSeconds;\n}, 100);","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Timer/Timer.js"],"names":["React","Timer","Component","constructor","isRunning","startTime","overallTime","_getTimeElapsedSinceLastStart","Date","now","start","console","error","stop","reset","getTime","render","timer","setInterval","timeInSeconds","Math","round","document","getElementById","innerText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACD;;AAEDC,EAAAA,6BAA6B,GAAG;AAC9B,QAAI,CAAC,KAAKF,SAAV,EAAqB;AACnB,aAAO,CAAP;AACD;;AAED,WAAOG,IAAI,CAACC,GAAL,KAAa,KAAKJ,SAAzB;AACD;;AAEDK,EAAAA,KAAK,GAAG;AACN,QAAI,KAAKN,SAAT,EAAoB;AAClB,aAAOO,OAAO,CAACC,KAAR,CAAc,0BAAd,CAAP;AACD;;AAED,SAAKR,SAAL,GAAiB,IAAjB;AAEA,SAAKC,SAAL,GAAiBG,IAAI,CAACC,GAAL,EAAjB;AACD;;AAEDI,EAAAA,IAAI,GAAG;AACL,QAAI,CAAC,KAAKT,SAAV,EAAqB;AACnB,aAAOO,OAAO,CAACC,KAAR,CAAc,0BAAd,CAAP;AACD;;AAED,SAAKR,SAAL,GAAiB,KAAjB;AAEA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,GAAmB,KAAKC,6BAAL,EAAtC;AACD;;AAEDO,EAAAA,KAAK,GAAG;AACN,SAAKR,WAAL,GAAmB,CAAnB;;AAEA,QAAI,KAAKF,SAAT,EAAoB;AAClB,WAAKC,SAAL,GAAiBG,IAAI,CAACC,GAAL,EAAjB;AACA;AACD;;AAED,SAAKJ,SAAL,GAAiB,CAAjB;AACD;;AAEDU,EAAAA,OAAO,GAAG;AACR,QAAI,CAAC,KAAKV,SAAV,EAAqB;AACnB,aAAO,CAAP;AACD;;AAED,QAAI,KAAKD,SAAT,EAAoB;AAClB,aAAO,KAAKE,WAAL,GAAmB,KAAKC,6BAAL,EAA1B;AACD;;AAED,WAAO,KAAKD,WAAZ;AACD;;AACDU,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAE,KAAKN,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AA/DiC;;AAkEpC,MAAMO,KAAK,GAAG,IAAIhB,KAAJ,EAAd;AACAgB,KAAK,CAACP,KAAN;AACAQ,WAAW,CAAC,MAAM;AAChB,QAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACF,OAAN,KAAkB,IAA7B,CAAtB;AACAO,EAAAA,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,SAAhC,GAA4CL,aAA5C;AACD,CAHU,EAGR,GAHQ,CAAX","sourcesContent":["import React from \"react\";\n\nclass Timer extends React.Component {\n  constructor() {\n    this.isRunning = false;\n    this.startTime = 0;\n    this.overallTime = 0;\n  }\n\n  _getTimeElapsedSinceLastStart() {\n    if (!this.startTime) {\n      return 0;\n    }\n\n    return Date.now() - this.startTime;\n  }\n\n  start() {\n    if (this.isRunning) {\n      return console.error(\"Timer is already running\");\n    }\n\n    this.isRunning = true;\n\n    this.startTime = Date.now();\n  }\n\n  stop() {\n    if (!this.isRunning) {\n      return console.error(\"Timer is already stopped\");\n    }\n\n    this.isRunning = false;\n\n    this.overallTime = this.overallTime + this._getTimeElapsedSinceLastStart();\n  }\n\n  reset() {\n    this.overallTime = 0;\n\n    if (this.isRunning) {\n      this.startTime = Date.now();\n      return;\n    }\n\n    this.startTime = 0;\n  }\n\n  getTime() {\n    if (!this.startTime) {\n      return 0;\n    }\n\n    if (this.isRunning) {\n      return this.overallTime + this._getTimeElapsedSinceLastStart();\n    }\n\n    return this.overallTime;\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.start}>start</button>\n      </div>\n    );\n  }\n}\n\nconst timer = new Timer();\ntimer.start();\nsetInterval(() => {\n  const timeInSeconds = Math.round(timer.getTime() / 1000);\n  document.getElementById(\"time\").innerText = timeInSeconds;\n}, 100);\n"]},"metadata":{},"sourceType":"module"}