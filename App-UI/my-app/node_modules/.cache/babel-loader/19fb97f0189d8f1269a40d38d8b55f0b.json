{"ast":null,"code":"var _jsxFileName = \"/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Timer/Timer.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timer() {\n  // function startTimer() {\n  //   (function () {\n  // set our end time\n  const endTime = new Date().getTime() + 301 * 1000; // const clock = document.getElementById(\"clock\");\n  // calculate remaining time from now until deadline\n\n  function getRemainingTime(deadline) {\n    const currentTime = new Date().getTime();\n    return deadline - currentTime;\n  } // pad value with zero\n\n\n  function pad(value) {\n    return (\"0\" + Math.floor(value)).slice(-2);\n  } // show time repeatedly\n\n\n  function showTime() {\n    const remainingTime = getRemainingTime(endTime);\n    const seconds = pad(remainingTime / 1000 % 60);\n    const minutes = pad(remainingTime / (60 * 1000) % 60); // document.getElementById(\"clock\").innerHTML = `${minutes}:${seconds}`;\n    // ensure clock only updates if a second or more is remaining\n\n    if (remainingTime >= 1000) {\n      requestAnimationFrame(showTime);\n    }\n  } // kick it all off\n\n\n  requestAnimationFrame(showTime); // })();\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Countdown Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startTimer,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), seconds, minutes, /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"clockdiv\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"clock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_c = Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Timer/Timer.js"],"names":["React","useState","Timer","endTime","Date","getTime","getRemainingTime","deadline","currentTime","pad","value","Math","floor","slice","showTime","remainingTime","seconds","minutes","requestAnimationFrame","startTimer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAC9B;AACA;AACA;AACA,QAAMC,OAAO,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,MAAM,IAA7C,CAJ8B,CAM9B;AAEA;;AACA,WAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,UAAMC,WAAW,GAAG,IAAIJ,IAAJ,GAAWC,OAAX,EAApB;AACA,WAAOE,QAAQ,GAAGC,WAAlB;AACD,GAZ6B,CAc9B;;;AACA,WAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,WAAO,CAAC,MAAMC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAP,EAA0BG,KAA1B,CAAgC,CAAC,CAAjC,CAAP;AACD,GAjB6B,CAmB9B;;;AACA,WAASC,QAAT,GAAoB;AAClB,UAAMC,aAAa,GAAGT,gBAAgB,CAACH,OAAD,CAAtC;AAEA,UAAMa,OAAO,GAAGP,GAAG,CAAEM,aAAa,GAAG,IAAjB,GAAyB,EAA1B,CAAnB;AACA,UAAME,OAAO,GAAGR,GAAG,CAAEM,aAAa,IAAI,KAAK,IAAT,CAAd,GAAgC,EAAjC,CAAnB,CAJkB,CAMlB;AAEA;;AACA,QAAIA,aAAa,IAAI,IAArB,EAA2B;AACzBG,MAAAA,qBAAqB,CAACJ,QAAD,CAArB;AACD;AACF,GAhC6B,CAkC9B;;;AACAI,EAAAA,qBAAqB,CAACJ,QAAD,CAArB,CAnC8B,CAoC9B;AACA;;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEK,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGH,OAHH,EAIGC,OAJH,eAKE;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA,6BACE;AAAM,QAAA,EAAE,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;KAlDuBf,K","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Timer() {\n  // function startTimer() {\n  //   (function () {\n  // set our end time\n  const endTime = new Date().getTime() + 301 * 1000;\n\n  // const clock = document.getElementById(\"clock\");\n\n  // calculate remaining time from now until deadline\n  function getRemainingTime(deadline) {\n    const currentTime = new Date().getTime();\n    return deadline - currentTime;\n  }\n\n  // pad value with zero\n  function pad(value) {\n    return (\"0\" + Math.floor(value)).slice(-2);\n  }\n\n  // show time repeatedly\n  function showTime() {\n    const remainingTime = getRemainingTime(endTime);\n\n    const seconds = pad((remainingTime / 1000) % 60);\n    const minutes = pad((remainingTime / (60 * 1000)) % 60);\n\n    // document.getElementById(\"clock\").innerHTML = `${minutes}:${seconds}`;\n\n    // ensure clock only updates if a second or more is remaining\n    if (remainingTime >= 1000) {\n      requestAnimationFrame(showTime);\n    }\n  }\n\n  // kick it all off\n  requestAnimationFrame(showTime);\n  // })();\n  // }\n\n  return (\n    <div>\n      <h1>Countdown Clock</h1>\n      <button onClick={startTimer}>Start</button>\n      {seconds}\n      {minutes}\n      <div id='clockdiv'>\n        <span id='clock'></span>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}