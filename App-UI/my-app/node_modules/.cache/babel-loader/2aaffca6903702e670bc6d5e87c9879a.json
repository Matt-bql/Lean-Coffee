{"ast":null,"code":"var _jsxFileName = \"/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/DragandDrop/DragandDropContainer.js.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { TopicContext } from \"../Contexts/TopicContext\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DragandDropContainer() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const {\n    topics\n  } = useContext(TopicContext);\n  useEffect(_s(() => {\n    _s();\n\n    console.log(\"topics: \", topics);\n    const columnsFromBackend = {\n      [uuidv4()]: {\n        name: \"Requested\",\n        items: topics\n      },\n      [uuidv4()]: {\n        name: \"Current Discussion\",\n        items: []\n      },\n      [uuidv4()]: {\n        name: \"Completed\",\n        items: []\n      }\n    };\n\n    const onDragEnd = (result, columns, setColumns) => {\n      if (!result.destination) return;\n      const {\n        source,\n        destination\n      } = result;\n\n      if (source.droppableId !== destination.droppableId) {\n        const sourceColumn = columns[source.droppableId];\n        const destColumn = columns[destination.droppableId];\n        const sourceItems = [...sourceColumn.items];\n        const destItems = [...destColumn.items];\n        const [removed] = sourceItems.splice(source.index, 1);\n        destItems.splice(destination.index, 0, removed);\n        setColumns({ ...columns,\n          [source.droppableId]: { ...sourceColumn,\n            items: sourceItems\n          },\n          [destination.droppableId]: { ...destColumn,\n            items: destItems\n          }\n        });\n      } else {\n        const column = columns[source.droppableId];\n        const copiedItems = [...column.items];\n        const [removed] = copiedItems.splice(source.index, 1);\n        copiedItems.splice(destination.index, 0, removed);\n        setColumns({ ...columns,\n          [source.droppableId]: { ...column,\n            items: copiedItems\n          }\n        });\n      }\n    }; // console.log(columnsFromTheBackend);\n\n\n    const [columns, setColumns] = useState(columnsFromBackend);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        height: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: result => onDragEnd(result, columns, setColumns),\n        children: Object.entries(columns).map(([columnId, column], index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              flexDirection: \"column\",\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: column.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                margin: 8\n              },\n              children: /*#__PURE__*/_jsxDEV(Droppable, {\n                droppableId: columnId,\n                children: (provided, snapshot) => {\n                  return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n                    ref: provided.innerRef,\n                    style: {\n                      background: snapshot.isDraggingOver ? \"lightblue\" : \"lightgrey\",\n                      padding: 4,\n                      width: 250,\n                      minHeight: 500\n                    },\n                    children: [column.items.map((item, index) => {\n                      return /*#__PURE__*/_jsxDEV(Draggable, {\n                        draggableId: item.id,\n                        index: index,\n                        children: (provided, snapshot) => {\n                          return /*#__PURE__*/_jsxDEV(\"div\", {\n                            ref: provided.innerRef,\n                            ...provided.draggableProps,\n                            ...provided.dragHandleProps,\n                            style: {\n                              userSelect: \"none\",\n                              padding: 16,\n                              margin: \"0 0 8px 0\",\n                              minHeight: \"50px\",\n                              backgroundColor: snapshot.isDragging ? \"#263B4A\" : \"#456C86\",\n                              color: \"white\",\n                              ...provided.draggableProps.style\n                            },\n                            children: item.topicTitle\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 107,\n                            columnNumber: 37\n                          }, this);\n                        }\n                      }, item.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 100,\n                        columnNumber: 31\n                      }, this);\n                    }), provided.placeholder]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 86,\n                    columnNumber: 25\n                  }, this);\n                }\n              }, columnId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)]\n          }, columnId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }, \"bYCmdCIiWWb+ZDQE6HV7NzBHfWY=\"), []);\n}\n\n_s2(DragandDropContainer, \"WisP4qDPUNtBnFpxW05lpzP0a0Q=\");\n\n_c = DragandDropContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DragandDropContainer\");","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/DragandDrop/DragandDropContainer.js.js"],"names":["React","useContext","useState","useEffect","TopicContext","DragDropContext","Draggable","Droppable","v4","uuidv4","DragandDropContainer","topics","console","log","columnsFromBackend","name","items","onDragEnd","result","columns","setColumns","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","removed","splice","index","column","copiedItems","display","justifyContent","height","Object","entries","map","columnId","flexDirection","alignItems","margin","provided","snapshot","droppableProps","innerRef","background","isDraggingOver","padding","width","minHeight","item","id","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","color","style","topicTitle","placeholder"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport { TopicContext } from \"../Contexts/TopicContext\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport default function DragandDropContainer() {\n  const { topics } = useContext(TopicContext);\n  useEffect(() => {\n    console.log(\"topics: \", topics);\n    const columnsFromBackend = {\n      [uuidv4()]: {\n        name: \"Requested\",\n        items: topics,\n      },\n      [uuidv4()]: {\n        name: \"Current Discussion\",\n        items: [],\n      },\n      [uuidv4()]: {\n        name: \"Completed\",\n        items: [],\n      },\n    };\n\n    const onDragEnd = (result, columns, setColumns) => {\n      if (!result.destination) return;\n      const { source, destination } = result;\n      if (source.droppableId !== destination.droppableId) {\n        const sourceColumn = columns[source.droppableId];\n        const destColumn = columns[destination.droppableId];\n        const sourceItems = [...sourceColumn.items];\n        const destItems = [...destColumn.items];\n        const [removed] = sourceItems.splice(source.index, 1);\n        destItems.splice(destination.index, 0, removed);\n        setColumns({\n          ...columns,\n          [source.droppableId]: {\n            ...sourceColumn,\n            items: sourceItems,\n          },\n          [destination.droppableId]: {\n            ...destColumn,\n            items: destItems,\n          },\n        });\n      } else {\n        const column = columns[source.droppableId];\n        const copiedItems = [...column.items];\n        const [removed] = copiedItems.splice(source.index, 1);\n        copiedItems.splice(destination.index, 0, removed);\n        setColumns({\n          ...columns,\n          [source.droppableId]: {\n            ...column,\n            items: copiedItems,\n          },\n        });\n      }\n    };\n    // console.log(columnsFromTheBackend);\n\n    const [columns, setColumns] = useState(columnsFromBackend);\n\n    return (\n      <div\n        style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}\n      >\n        <DragDropContext\n          onDragEnd={result => onDragEnd(result, columns, setColumns)}\n        >\n          {Object.entries(columns).map(([columnId, column], index) => {\n            return (\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                }}\n                key={columnId}\n              >\n                <h2>{column.name}</h2>\n                <div style={{ margin: 8 }}>\n                  <Droppable droppableId={columnId} key={columnId}>\n                    {(provided, snapshot) => {\n                      return (\n                        <div\n                          {...provided.droppableProps}\n                          ref={provided.innerRef}\n                          style={{\n                            background: snapshot.isDraggingOver\n                              ? \"lightblue\"\n                              : \"lightgrey\",\n                            padding: 4,\n                            width: 250,\n                            minHeight: 500,\n                          }}\n                        >\n                          {column.items.map((item, index) => {\n                            return (\n                              <Draggable\n                                key={item.id}\n                                draggableId={item.id}\n                                index={index}\n                              >\n                                {(provided, snapshot) => {\n                                  return (\n                                    <div\n                                      ref={provided.innerRef}\n                                      {...provided.draggableProps}\n                                      {...provided.dragHandleProps}\n                                      style={{\n                                        userSelect: \"none\",\n                                        padding: 16,\n                                        margin: \"0 0 8px 0\",\n                                        minHeight: \"50px\",\n                                        backgroundColor: snapshot.isDragging\n                                          ? \"#263B4A\"\n                                          : \"#456C86\",\n                                        color: \"white\",\n                                        ...provided.draggableProps.style,\n                                      }}\n                                    >\n                                      {item.topicTitle}\n                                    </div>\n                                  );\n                                }}\n                              </Draggable>\n                            );\n                          })}\n                          {provided.placeholder}\n                        </div>\n                      );\n                    }}\n                  </Droppable>\n                </div>\n              </div>\n            );\n          })}\n        </DragDropContext>\n      </div>\n    );\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}