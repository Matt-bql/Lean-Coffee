{"ast":null,"code":"function Timer() {\n  (function () {\n    // set our end time\n    const endTime = new Date().getTime() + 301 * 1000; // store clock div to avoid repeatedly querying the DOM\n\n    document.getElementById(\"clock\"); // calculate remaining time from now until deadline\n\n    function getRemainingTime(deadline) {\n      const currentTime = new Date().getTime();\n      return deadline - currentTime;\n    } // pad value with zero\n\n\n    function pad(value) {\n      return (\"0\" + Math.floor(value)).slice(-2);\n    } // show time repeatedly\n\n\n    function showTime() {\n      const remainingTime = getRemainingTime(endTime);\n      const seconds = pad(remainingTime / 1000 % 60);\n      const minutes = pad(remainingTime / (60 * 1000) % 60);\n      document.getElementById(\"clock\").innerHTML = `${minutes}:${seconds}`; // ensure clock only updates if a second or more is remaining\n\n      if (remainingTime >= 1000) {\n        requestAnimationFrame(showTime);\n      }\n    } // kick it all off\n\n\n    requestAnimationFrame(showTime);\n  })();\n}\n\n_c = Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Timer/Timer.js"],"names":["Timer","endTime","Date","getTime","document","getElementById","getRemainingTime","deadline","currentTime","pad","value","Math","floor","slice","showTime","remainingTime","seconds","minutes","innerHTML","requestAnimationFrame"],"mappings":"AAAA,SAASA,KAAT,GAAiB;AACf,GAAC,YAAY;AACX;AACA,UAAMC,OAAO,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,MAAM,IAA7C,CAFW,CAIX;;AACAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EALW,CAOX;;AACA,aAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,YAAMC,WAAW,GAAG,IAAIN,IAAJ,GAAWC,OAAX,EAApB;AACA,aAAOI,QAAQ,GAAGC,WAAlB;AACD,KAXU,CAaX;;;AACA,aAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,aAAO,CAAC,MAAMC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAP,EAA0BG,KAA1B,CAAgC,CAAC,CAAjC,CAAP;AACD,KAhBU,CAkBX;;;AACA,aAASC,QAAT,GAAoB;AAClB,YAAMC,aAAa,GAAGT,gBAAgB,CAACL,OAAD,CAAtC;AACA,YAAMe,OAAO,GAAGP,GAAG,CAAEM,aAAa,GAAG,IAAjB,GAAyB,EAA1B,CAAnB;AACA,YAAME,OAAO,GAAGR,GAAG,CAAEM,aAAa,IAAI,KAAK,IAAT,CAAd,GAAgC,EAAjC,CAAnB;AAEAX,MAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCa,SAAjC,GAA8C,GAAED,OAAQ,IAAGD,OAAQ,EAAnE,CALkB,CAOlB;;AACA,UAAID,aAAa,IAAI,IAArB,EAA2B;AACzBI,QAAAA,qBAAqB,CAACL,QAAD,CAArB;AACD;AACF,KA9BU,CAgCX;;;AACAK,IAAAA,qBAAqB,CAACL,QAAD,CAArB;AACD,GAlCD;AAmCD;;KApCQd,K","sourcesContent":["function Timer() {\n  (function () {\n    // set our end time\n    const endTime = new Date().getTime() + 301 * 1000;\n\n    // store clock div to avoid repeatedly querying the DOM\n    document.getElementById(\"clock\");\n\n    // calculate remaining time from now until deadline\n    function getRemainingTime(deadline) {\n      const currentTime = new Date().getTime();\n      return deadline - currentTime;\n    }\n\n    // pad value with zero\n    function pad(value) {\n      return (\"0\" + Math.floor(value)).slice(-2);\n    }\n\n    // show time repeatedly\n    function showTime() {\n      const remainingTime = getRemainingTime(endTime);\n      const seconds = pad((remainingTime / 1000) % 60);\n      const minutes = pad((remainingTime / (60 * 1000)) % 60);\n\n      document.getElementById(\"clock\").innerHTML = `${minutes}:${seconds}`;\n\n      // ensure clock only updates if a second or more is remaining\n      if (remainingTime >= 1000) {\n        requestAnimationFrame(showTime);\n      }\n    }\n\n    // kick it all off\n    requestAnimationFrame(showTime);\n  })();\n}\n"]},"metadata":{},"sourceType":"module"}