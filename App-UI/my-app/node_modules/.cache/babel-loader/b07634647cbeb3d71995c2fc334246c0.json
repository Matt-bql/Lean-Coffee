{"ast":null,"code":"var _jsxFileName = \"/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Timer/Timer.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timer() {\n  function startTimer() {\n    (function () {\n      // set our end time\n      const endTime = new Date().getTime() + 301 * 1000; // store clock div to avoid repeatedly querying the DOM\n      // const clock = document.getElementById(\"clock\");\n      // calculate remaining time from now until deadline\n\n      function getRemainingTime(deadline) {\n        const currentTime = new Date().getTime();\n        return deadline - currentTime;\n      } // pad value with zero\n\n\n      function pad(value) {\n        return (\"0\" + Math.floor(value)).slice(-2);\n      } // show time repeatedly\n\n\n      function showTime() {\n        const remainingTime = getRemainingTime(endTime);\n        const seconds = pad(remainingTime / 1000 % 60);\n        const minutes = pad(remainingTime / (60 * 1000) % 60);\n        document.getElementById(\"clock\").innerHTML = `${minutes}:${seconds}`; // ensure clock only updates if a second or more is remaining\n\n        if (remainingTime >= 1000) {\n          requestAnimationFrame(showTime);\n        }\n      }\n\n      console.log(new Date()); // kick it all off\n\n      requestAnimationFrame(showTime);\n    })();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Countdown Clock\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startTimer,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"clockdiv\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"clock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_c = Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/lisab/Dev/Lean-Coffee/App-UI/my-app/src/components/Timer/Timer.js"],"names":["Timer","startTimer","endTime","Date","getTime","getRemainingTime","deadline","currentTime","pad","value","Math","floor","slice","showTime","remainingTime","seconds","minutes","document","getElementById","innerHTML","requestAnimationFrame","console","log"],"mappings":";;AAAA,eAAe,SAASA,KAAT,GAAiB;AAC9B,WAASC,UAAT,GAAsB;AACpB,KAAC,YAAY;AACX;AACA,YAAMC,OAAO,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,MAAM,IAA7C,CAFW,CAIX;AACA;AAEA;;AACA,eAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC,cAAMC,WAAW,GAAG,IAAIJ,IAAJ,GAAWC,OAAX,EAApB;AACA,eAAOE,QAAQ,GAAGC,WAAlB;AACD,OAXU,CAaX;;;AACA,eAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,eAAO,CAAC,MAAMC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAP,EAA0BG,KAA1B,CAAgC,CAAC,CAAjC,CAAP;AACD,OAhBU,CAkBX;;;AACA,eAASC,QAAT,GAAoB;AAClB,cAAMC,aAAa,GAAGT,gBAAgB,CAACH,OAAD,CAAtC;AACA,cAAMa,OAAO,GAAGP,GAAG,CAAEM,aAAa,GAAG,IAAjB,GAAyB,EAA1B,CAAnB;AACA,cAAME,OAAO,GAAGR,GAAG,CAAEM,aAAa,IAAI,KAAK,IAAT,CAAd,GAAgC,EAAjC,CAAnB;AAEAG,QAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,SAAjC,GAA8C,GAAEH,OAAQ,IAAGD,OAAQ,EAAnE,CALkB,CAOlB;;AACA,YAAID,aAAa,IAAI,IAArB,EAA2B;AACzBM,UAAAA,qBAAqB,CAACP,QAAD,CAArB;AACD;AACF;;AAEDQ,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAInB,IAAJ,EAAZ,EAhCW,CAiCX;;AACAiB,MAAAA,qBAAqB,CAACP,QAAD,CAArB;AACD,KAnCD;AAoCD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEZ,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,EAAE,EAAC,UAAR;AAAA,6BACE;AAAM,QAAA,EAAE,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;KAjDuBD,K","sourcesContent":["export default function Timer() {\n  function startTimer() {\n    (function () {\n      // set our end time\n      const endTime = new Date().getTime() + 301 * 1000;\n\n      // store clock div to avoid repeatedly querying the DOM\n      // const clock = document.getElementById(\"clock\");\n\n      // calculate remaining time from now until deadline\n      function getRemainingTime(deadline) {\n        const currentTime = new Date().getTime();\n        return deadline - currentTime;\n      }\n\n      // pad value with zero\n      function pad(value) {\n        return (\"0\" + Math.floor(value)).slice(-2);\n      }\n\n      // show time repeatedly\n      function showTime() {\n        const remainingTime = getRemainingTime(endTime);\n        const seconds = pad((remainingTime / 1000) % 60);\n        const minutes = pad((remainingTime / (60 * 1000)) % 60);\n\n        document.getElementById(\"clock\").innerHTML = `${minutes}:${seconds}`;\n\n        // ensure clock only updates if a second or more is remaining\n        if (remainingTime >= 1000) {\n          requestAnimationFrame(showTime);\n        }\n      }\n\n      console.log(new Date());\n      // kick it all off\n      requestAnimationFrame(showTime);\n    })();\n  }\n\n  return (\n    <div>\n      <h1>Countdown Clock</h1>\n      <button onClick={startTimer}>Start</button>\n      <div id='clockdiv'>\n        <span id='clock'></span>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}